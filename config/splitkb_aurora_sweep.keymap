/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "keys_de_swiss.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&default_transform {
    col-offset = <0>;
};

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

&led_strip {
    chain-length = <21>;
};

/ {
    combos {
        compatible = "zmk,combos";

        n1 {
            bindings = <&n1_f1>;
            key-positions = <4 14>;
        };

        n2 {
            bindings = <&n2_f2>;
            key-positions = <3 13>;
        };

        n3 {
            bindings = <&n3_f3>;
            key-positions = <2 12>;
        };

        n4 {
            bindings = <&n4_f4>;
            key-positions = <1 11>;
        };

        n5 {
            bindings = <&n5_f5>;
            key-positions = <0 10>;
        };

        n6 {
            bindings = <&n6_f6>;
            key-positions = <14 24>;
        };

        n7 {
            bindings = <&n7_f7>;
            key-positions = <13 23>;
        };

        n8 {
            bindings = <&n8_f8>;
            key-positions = <12 22>;
        };

        n9 {
            bindings = <&n9_f9>;
            key-positions = <11 21>;
        };

        n0 {
            bindings = <&n0_f10>;
            key-positions = <10 20>;
        };

        trans1 {
            bindings = <&trans>;
            key-positions = <4 2>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <14 12>;
        };

        dollar_strich {
            bindings = <&dollar_strich>;
            key-positions = <24 22>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <3 1>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <13 11>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <23 21>;
        };

        z {
            bindings = <&kp DE_Z>;
            key-positions = <3 4>;
        };

        g {
            bindings = <&kp G>;
            key-positions = <14 13>;
        };

        b {
            bindings = <&kp B>;
            key-positions = <24 23>;
        };

        m {
            bindings = <&kp M>;
            key-positions = <3 2>;
        };

        f {
            bindings = <&kp F>;
            key-positions = <13 12>;
        };

        v {
            bindings = <&kp V>;
            key-positions = <23 22>;
        };

        d {
            bindings = <&kp D>;
            key-positions = <2 1>;
        };

        s {
            bindings = <&kp S>;
            key-positions = <12 11>;
        };

        c {
            bindings = <&kp C>;
            key-positions = <22 21>;
        };

        komma {
            bindings = <&kp DE_COMMA>;
            key-positions = <14 3>;
        };

        punkt {
            bindings = <&kp DE_DOT>;
            key-positions = <13 2>;
        };

        trans2 {
            bindings = <&trans>;
            key-positions = <12 1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <24 13>;
        };

        strich {
            bindings = <&kp DE_MINUS>;
            key-positions = <23 12>;
        };

        trans3 {
            bindings = <&trans>;
            key-positions = <22 11>;
        };

        trans4 {
            bindings = <&trans>;
            key-positions = <3 12>;
        };

        y {
            bindings = <&kp DE_Y>;
            key-positions = <23 12 21>;
        };

        x {
            bindings = <&kp DE_X>;
            key-positions = <13 2 11>;
        };

        at {
            bindings = <&kp DE_AT>;
            key-positions = <22 11 20>;
        };

        trans {
            bindings = <&trans>;
            key-positions = <12 1 10>;
        };

        angle-bracket {
            bindings = <&angle_bracket>;
            key-positions = <13 1>;
        };

        square_bracket {
            bindings = <&square_bracket>;
            key-positions = <23 11>;
        };

        curly_bracket {
            bindings = <&curly_bracket>;
            key-positions = <3 11>;
        };

        trans5 {
            bindings = <&trans>;
            key-positions = <14 22>;
        };

        round_bracket {
            bindings = <&round_bracket>;
            key-positions = <13 21>;
        };

        prozent_kaufmaenisch {
            bindings = <&przoent_ampersand>;
            key-positions = <14 3 2>;
        };

        slashes {
            bindings = <&forward_back_slash>;
            key-positions = <13 2 1>;
        };

        hash {
            bindings = <&kp DE_HASH>;
            key-positions = <24 13 12>;
        };

        plus_mal {
            bindings = <&plus_mal>;
            key-positions = <23 12 11>;
        };

        ae {
            bindings = <&shift_ae>;
            key-positions = <4 3 2>;
        };

        w {
            bindings = <&kp DE_W>;
            key-positions = <3 2 1>;
        };

        oe {
            bindings = <&shift_oe>;
            key-positions = <14 13 12>;
        };

        q {
            bindings = <&kp DE_Q>;
            key-positions = <13 12 11>;
        };

        ue {
            bindings = <&shift_ue>;
            key-positions = <24 23 22>;
        };

        p {
            bindings = <&kp DE_P>;
            key-positions = <23 22 21>;
        };

        previous_track {
            bindings = <&kp C_PREV>;
            key-positions = <30 23>;
            layers = <1>;
        };

        question_exclamation {
            bindings = <&question_exclamation>;
            key-positions = <12 2 13>;
        };

        qutoes {
            bindings = <&quotes>;
            key-positions = <22 12 23>;
        };

        tilde_daechli {
            bindings = <&tilde_caret>;
            key-positions = <12 2 11>;
        };

        ticks {
            bindings = <&ticks>;
            key-positions = <21 22 12>;
        };
    };

    macros {
        caps_ae: caps_ae {
            compatible = "zmk,behavior-macro";
            label = "CAPS_AE";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp CAPSLOCK>,
                <&macro_tap>,
                <&kp DE_A_UMLAUT>,
                <&macro_tap>,
                <&kp CAPSLOCK>;
        };
        caps_oe: caps_oe {
            compatible = "zmk,behavior-macro";
            label = "CAPS_OE";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp CAPSLOCK>,
                <&macro_tap>,
                <&kp DE_O_UMLAUT>,
                <&macro_tap>,
                <&kp CAPSLOCK>;
        };
        caps_ue: caps_ue {
            compatible = "zmk,behavior-macro";
            label = "CAPS_UE";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp CAPSLOCK>,
                <&macro_tap>,
                <&kp DE_U_UMLAUT>,
                <&macro_tap>,
                <&kp CAPSLOCK>;
        };
    };

    behaviors {
        brace: brace {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACE";
            bindings =
                <&kp DE_LEFT_BRACE>,
                <&kp DE_RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        shift_ae: shift_ae {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_AE";
            bindings =
                <&kp DE_A_UMLAUT>,
                <&caps_ae>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        shift_oe: shift_oe {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_OE";
            bindings =
                <&kp DE_O_UMLAUT>,
                <&caps_oe>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        shift_ue: shift_ue {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_UE";
            bindings =
                <&kp DE_U_UMLAUT>,
                <&caps_ue>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n1_f1: n1_f1 {
            compatible = "zmk,behavior-mod-morph";
            label = "N1_F1";
            bindings =
                <&kp NUMBER_1>,
                <&kp F1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n2_f2: n2_f2 {
            compatible = "zmk,behavior-mod-morph";
            label = "N2_F2";
            bindings =
                <&kp NUMBER_2>,
                <&kp F2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n3_f3: n3_f3 {
            compatible = "zmk,behavior-mod-morph";
            label = "N3_F3";
            bindings =
                <&kp NUMBER_3>,
                <&kp F3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n4_f4: n4_f4 {
            compatible = "zmk,behavior-mod-morph";
            label = "N4_F4";
            bindings =
                <&kp NUMBER_4>,
                <&kp F4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n5_f5: n5_f5 {
            compatible = "zmk,behavior-mod-morph";
            label = "N5_F5";
            bindings =
                <&kp NUMBER_5>,
                <&kp F5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n6_f6: n6_f6 {
            compatible = "zmk,behavior-mod-morph";
            label = "N6_F6";
            bindings =
                <&kp NUMBER_6>,
                <&kp F6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n7_f7: n7_f7 {
            compatible = "zmk,behavior-mod-morph";
            label = "N7_F7";
            bindings =
                <&kp NUMBER_7>,
                <&kp F7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n8_f8: n8_f8 {
            compatible = "zmk,behavior-mod-morph";
            label = "N8_F8";
            bindings =
                <&kp NUMBER_8>,
                <&kp F8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n9_f9: n9_f9 {
            compatible = "zmk,behavior-mod-morph";
            label = "N9_F9";
            bindings =
                <&kp NUMBER_9>,
                <&kp F9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n0_f10: n0_f10 {
            compatible = "zmk,behavior-mod-morph";
            label = "N0_F10";
            bindings =
                <&kp NUMBER_0>,
                <&kp F10>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        angle_bracket: angle_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "ANGLE_BRACKET";
            bindings =
                <&kp DE_LT>,
                <&kp DE_GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        square_bracket: square_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "SQUARE_BRACKET";
            bindings =
                <&kp DE_LBKT>,
                <&kp DE_RBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        curly_bracket: curly_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "CURLY_BRACKET";
            bindings =
                <&kp DE_LBRC>,
                <&kp DE_RBRC>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        round_bracket: round_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "ROUND_BRACKET";
            bindings =
                <&kp DE_LPAR>,
                <&kp DE_RPAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        question_exclamation: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            bindings =
                <&kp DE_QUESTION>,
                <&kp DE_EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        quotes: quotes {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTES";
            bindings =
                <&kp DE_SQT>,
                <&kp DE_DOUBLE_QUOTES>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        tilde_caret: tilde_caret {
            compatible = "zmk,behavior-mod-morph";
            label = "TILDE_CARET";
            bindings =
                <&kp DE_TILDE>,
                <&kp DE_CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ticks: ticks {
            compatible = "zmk,behavior-mod-morph";
            label = "TICKS";
            bindings =
                <&kp DE_GRAVE>,
                <&kp DE_ACUTE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        przoent_ampersand: przoent_ampersand {
            compatible = "zmk,behavior-mod-morph";
            label = "PRZOENT_AMPERSAND";
            bindings =
                <&kp DE_PERCENT>,
                <&kp DE_AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dollar_strich: dollar_strich {
            compatible = "zmk,behavior-mod-morph";
            label = "DOLLAR_STRICH";
            bindings =
                <&kp DE_DOLLAR>,
                <&kp DE_PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        plus_mal: plus_mal {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_MAL";
            bindings =
                <&kp DE_PLUS>,
                <&kp DE_ASTERISK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        forward_back_slash: forward_back_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "FORWARD_BACK_SLASH";
            bindings =
                <&kp DE_SLASH>,
                <&kp DE_BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        next_prev: next_prev {
            compatible = "zmk,behavior-mod-morph";
            label = "NEXT_PREV";
            bindings =
                <&kp C_NEXT>,
                <&kp C_PREV>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lauter_leiser: lauter_leiser {
            compatible = "zmk,behavior-mod-morph";
            label = "LAUTER_LEISER";
            bindings =
                <&kp C_VOLUME_UP>,
                <&kp C_VOLUME_DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp LEFT_COMMAND  &kp O  &kp DE_I  &kp U             &kp T            &trans  &trans  &trans  &trans  &trans
&kp LEFT_ALT      &kp L  &kp K     &kp J             &kp H            &trans  &trans  &trans  &trans  &trans
&to 1             &kp A  &kp DE_E  &kp DE_R          &kp N            &trans  &trans  &trans  &trans  &trans
                                   &kp LEFT_CONTROL  &sk RIGHT_SHIFT  &trans  &trans
            >;
        };

        nav_nag {
            bindings = <
&kp C_VOLUME_UP    &kp END          &kp PAGE_UP       &kp PAGE_DOWN   &kp HOME        &trans  &trans  &trans  &trans  &trans
&kp C_VOLUME_DOWN  &kp RIGHT_ARROW  &kp UP_ARROW      &kp DOWN_ARROW  &kp LEFT_ARROW  &trans  &trans  &trans  &trans  &trans
&to 2              &kp C_PREVIOUS   &kp C_PLAY_PAUSE  &kp C_NEXT      &to 0           &trans  &trans  &trans  &trans  &trans
                                                      &kp LCTRL       &kp LSHIFT      &trans  &trans
            >;
        };

        f_special {
            bindings = <
&out OUT_USB  &none         &bt BT_CLR    &none         &out OUT_BLE  &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans
&none         &bootloader   &none         &sys_reset    &to 0         &trans  &trans  &trans  &trans  &trans
                                          &trans        &trans        &trans  &trans
            >;
        };
    };
};
