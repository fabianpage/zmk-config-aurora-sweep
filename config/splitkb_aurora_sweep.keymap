/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "keys_de_swiss.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&default_transform {
    col-offset = <0>;
};

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

&led_strip {
    chain-length = <21>;
};

/ {
    combos {
        compatible = "zmk,combos";

        n1 {
            bindings = <&kp NUMBER_1>;
            key-positions = <4 14>;
            layers = <0>;
        };

        f1 {
            bindings = <&kp F1>;
            key-positions = <4 14>;
            layers = <1>;
        };

        n2 {
            bindings = <&kp NUMBER_2>;
            key-positions = <3 13>;
            layers = <0>;
        };

        f2 {
            bindings = <&kp F2>;
            key-positions = <3 13>;
            layers = <1>;
        };

        n3 {
            bindings = <&kp NUMBER_3>;
            key-positions = <2 12>;
            layers = <0>;
        };

        f3 {
            bindings = <&kp F3>;
            key-positions = <2 12>;
            layers = <1>;
        };

        n4 {
            bindings = <&kp NUMBER_4>;
            key-positions = <1 11>;
            layers = <0>;
        };

        f4 {
            bindings = <&kp F4>;
            key-positions = <1 11>;
            layers = <1>;
        };

        n5 {
            bindings = <&kp NUMBER_5>;
            key-positions = <0 10>;
            layers = <0>;
        };

        f5 {
            bindings = <&kp F5>;
            key-positions = <0 10>;
            layers = <1>;
        };

        n6 {
            bindings = <&kp NUMBER_6>;
            key-positions = <14 24>;
            layers = <0>;
        };

        f6 {
            bindings = <&kp F6>;
            key-positions = <14 24>;
            layers = <1>;
        };

        n7 {
            bindings = <&kp NUMBER_7>;
            key-positions = <13 23>;
            layers = <0>;
        };

        f7 {
            bindings = <&kp F7>;
            key-positions = <13 23>;
            layers = <1>;
        };

        n8 {
            bindings = <&kp NUMBER_8>;
            key-positions = <12 22>;
            layers = <0>;
        };

        f8 {
            bindings = <&kp F8>;
            key-positions = <12 22>;
            layers = <1>;
        };

        n9 {
            bindings = <&kp NUMBER_9>;
            key-positions = <11 21>;
            layers = <0>;
        };

        f9 {
            bindings = <&kp F9>;
            key-positions = <11 21>;
            layers = <1>;
        };

        n0 {
            bindings = <&kp N0>;
            key-positions = <10 20>;
            layers = <0>;
        };

        f0 {
            bindings = <&kp F10>;
            key-positions = <10 20>;
            layers = <1>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <14 12>;
        };

        dollar {
            bindings = <&kp DE_DOLLAR>;
            key-positions = <24 22>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <13 11>;
        };

        z {
            bindings = <&kp DE_Z>;
            key-positions = <3 4>;
            layers = <0>;
        };

        g {
            bindings = <&kp G>;
            key-positions = <14 13>;
            layers = <0>;
        };

        b {
            bindings = <&kp B>;
            key-positions = <24 23>;
            layers = <0>;
        };

        m {
            bindings = <&kp M>;
            key-positions = <3 2>;
            layers = <0>;
        };

        f {
            bindings = <&kp F>;
            key-positions = <13 12>;
            layers = <0>;
        };

        v {
            bindings = <&kp V>;
            key-positions = <23 22>;
            layers = <0>;
        };

        w {
            bindings = <&kp DE_W>;
            key-positions = <2 1>;
            layers = <0>;
        };

        oe {
            bindings = <&shift_oe>;
            key-positions = <12 11>;
            layers = <0>;
        };

        c {
            bindings = <&kp C>;
            key-positions = <22 21>;
            layers = <0>;
        };

        q {
            bindings = <&kp DE_Q>;
            key-positions = <1 0>;
            layers = <0>;
        };

        ae {
            bindings = <&shift_ae>;
            key-positions = <11 10>;
            layers = <0>;
        };

        ue {
            bindings = <&shift_ue>;
            key-positions = <21 20>;
            layers = <0>;
        };

        x {
            bindings = <&kp DE_X>;
            key-positions = <3 4>;
            layers = <1>;
        };

        y {
            bindings = <&kp DE_Y>;
            key-positions = <13 14>;
            layers = <1>;
        };

        angled-open {
            bindings = <&kp DE_LT>;
            key-positions = <23 24>;
            layers = <1>;
        };

        square-open {
            bindings = <&kp DE_LBKT>;
            key-positions = <3 2>;
            layers = <1>;
        };

        round-open {
            bindings = <&kp DE_LPAR>;
            key-positions = <13 12>;
            layers = <1>;
        };

        curly-open {
            bindings = <&kp DE_LBRC>;
            key-positions = <22 23>;
            layers = <1>;
        };

        square-close {
            bindings = <&kp DE_RBKT>;
            key-positions = <2 1>;
            layers = <1>;
        };

        round-close {
            bindings = <&kp DE_RPAR>;
            key-positions = <11 12>;
            layers = <1>;
        };

        curly-close {
            bindings = <&kp DE_RBRC>;
            key-positions = <22 21>;
            layers = <1>;
        };

        backspace2 {
            bindings = <&kp BACKSPACE>;
            key-positions = <0 1>;
            layers = <1>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <11 10>;
            layers = <1>;
        };

        angled-close {
            bindings = <&kp DE_GT>;
            key-positions = <21 20>;
            layers = <1>;
        };

        komma {
            bindings = <&kp DE_COMMA>;
            key-positions = <14 3>;
            layers = <0>;
        };

        punkt {
            bindings = <&kp DE_DOT>;
            key-positions = <13 2>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <24 13>;
            layers = <0>;
        };

        strich {
            bindings = <&kp DE_MINUS>;
            key-positions = <23 12>;
            layers = <0>;
        };

        prozent_kaufmaenisch {
            bindings = <&kp DE_PERCENT>;
            key-positions = <14 3 2>;
        };

        slashes {
            bindings = <&kp DE_AMPERSAND>;
            key-positions = <13 2 1>;
        };

        hash {
            bindings = <&kp DE_HASH>;
            key-positions = <24 13 12>;
        };

        plus_mal {
            bindings = <&kp DE_EQUAL>;
            key-positions = <23 12 11>;
        };

        bt0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <4 14 24>;
        };

        bt1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <3 13 23>;
        };

        bt2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <22 12 2>;
        };

        bt3 {
            bindings = <&bt BT_SEL 3>;
            key-positions = <1 11 21>;
        };

        bt4 {
            bindings = <&bt BT_SEL 4>;
            key-positions = <0 10 20>;
        };

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <0 1 2 3>;
        };

        ble {
            bindings = <&out OUT_BLE>;
            key-positions = <11 12 13 14>;
        };

        usb {
            bindings = <&out OUT_USB>;
            key-positions = <24 23 22 21>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <20 21 22 23>;
        };

        pipe_combo {
            bindings = <&kp DE_PIPE>;
            key-positions = <21 23>;
            layers = <0>;
        };

        DQOUTS {
            bindings = <&kp DE_DQT>;
            key-positions = <14 3>;
            layers = <1>;
        };

        SQUOT {
            bindings = <&kp DE_SQT>;
            key-positions = <13 2>;
            layers = <0>;
        };

        BACKTICK {
            bindings = <&kp DE_GRAVE>;
            key-positions = <24 13>;
            layers = <1>;
        };

        FRONTTICK {
            bindings = <&kp DE_ACUTE>;
            key-positions = <23 12>;
            layers = <1>;
        };

        star {
            bindings = <&kp DE_STAR>;
            key-positions = <14 13 12>;
            layers = <0>;
        };

        plus {
            bindings = <&kp DE_PLUS>;
            key-positions = <4 3 2>;
            layers = <0>;
        };

        Dach {
            bindings = <&with_space DE_CARET>;
            key-positions = <24 23 22>;
            layers = <0>;
        };

        tilde {
            bindings = <&with_space DE_TILDE>;
            key-positions = <23 22 21>;
            layers = <0>;
        };

        kspitz {
            bindings = <&klammer DE_LT DE_GT>;
            key-positions = <24 23 22>;
            layers = <1>;
        };

        kbracket {
            bindings = <&klammer DE_LBKT DE_RBKT>;
            key-positions = <3 2 1>;
            layers = <1>;
        };

        kparen {
            bindings = <&klammer DE_LPAR DE_RPAR>;
            key-positions = <11 12 13>;
            layers = <1>;
        };

        kgeschweift {
            bindings = <&klammer DE_LBRC DE_RBRC>;
            key-positions = <21 22 23>;
            layers = <1>;
        };

        backslash {
            bindings = <&kp DE_BACKSLASH>;
            key-positions = <2 13 1>;
            layers = <1>;
        };

        slash {
            bindings = <&kp DE_FSLH>;
            key-positions = <12 11 23>;
            layers = <1>;
        };

        equal {
            bindings = <&kp DE_EQUAL>;
            key-positions = <14 3 12>;
        };

        question {
            bindings = <&kp DE_QMARK>;
            key-positions = <13 2 11>;
        };

        at {
            bindings = <&kp DE_AT>;
            key-positions = <24 13 22>;
        };

        exclamation {
            bindings = <&kp DE_EXCL>;
            key-positions = <23 12 21>;
        };
    };

    macros {
        caps_ae: caps_ae {
            compatible = "zmk,behavior-macro";
            label = "CAPS_AE";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp CAPSLOCK>,
                <&macro_tap>,
                <&kp DE_A_UMLAUT>,
                <&macro_tap>,
                <&kp CAPSLOCK>;
        };

        caps_oe: caps_oe {
            compatible = "zmk,behavior-macro";
            label = "CAPS_OE";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp CAPSLOCK>,
                <&macro_tap>,
                <&kp DE_O_UMLAUT>,
                <&macro_tap>,
                <&kp CAPSLOCK>;
        };

        caps_ue: caps_ue {
            compatible = "zmk,behavior-macro";
            label = "CAPS_UE";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp CAPSLOCK>,
                <&macro_tap>,
                <&kp DE_U_UMLAUT>,
                <&macro_tap>,
                <&kp CAPSLOCK>;
        };

        with_space: with_space {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &kp SPACE>;
            label = "WITH_SPACE";
        };

        klammer: klammer {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER &kp LEFT_ARROW>;
            label = "KLAMMER";
        };
    };

    behaviors {
        brace: brace {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACE";
            bindings = <&kp DE_LEFT_BRACE>, <&kp DE_RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_ae: shift_ae {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_AE";
            bindings = <&kp DE_A_UMLAUT>, <&caps_ae>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_oe: shift_oe {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_OE";
            bindings = <&kp DE_O_UMLAUT>, <&caps_oe>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_ue: shift_ue {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_UE";
            bindings = <&kp DE_U_UMLAUT>, <&caps_ue>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n1_f1: n1_f1 {
            compatible = "zmk,behavior-mod-morph";
            label = "N1_F1";
            bindings = <&kp NUMBER_1>, <&kp F1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n2_f2: n2_f2 {
            compatible = "zmk,behavior-mod-morph";
            label = "N2_F2";
            bindings = <&kp NUMBER_2>, <&kp F2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n3_f3: n3_f3 {
            compatible = "zmk,behavior-mod-morph";
            label = "N3_F3";
            bindings = <&kp NUMBER_3>, <&kp F3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n4_f4: n4_f4 {
            compatible = "zmk,behavior-mod-morph";
            label = "N4_F4";
            bindings = <&kp NUMBER_4>, <&kp F4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n5_f5: n5_f5 {
            compatible = "zmk,behavior-mod-morph";
            label = "N5_F5";
            bindings = <&kp NUMBER_5>, <&kp F5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n6_f6: n6_f6 {
            compatible = "zmk,behavior-mod-morph";
            label = "N6_F6";
            bindings = <&kp NUMBER_6>, <&kp F6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n7_f7: n7_f7 {
            compatible = "zmk,behavior-mod-morph";
            label = "N7_F7";
            bindings = <&kp NUMBER_7>, <&kp F7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n8_f8: n8_f8 {
            compatible = "zmk,behavior-mod-morph";
            label = "N8_F8";
            bindings = <&kp NUMBER_8>, <&kp F8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n9_f9: n9_f9 {
            compatible = "zmk,behavior-mod-morph";
            label = "N9_F9";
            bindings = <&kp NUMBER_9>, <&kp F9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        n0_f10: n0_f10 {
            compatible = "zmk,behavior-mod-morph";
            label = "N0_F10";
            bindings = <&kp NUMBER_0>, <&kp F10>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        angle_bracket: angle_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "ANGLE_BRACKET";
            bindings = <&kp DE_LT>, <&kp DE_GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        square_bracket: square_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "SQUARE_BRACKET";
            bindings = <&kp DE_LBKT>, <&kp DE_RBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        curly_bracket: curly_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "CURLY_BRACKET";
            bindings = <&kp DE_LBRC>, <&kp DE_RBRC>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        round_bracket: round_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "ROUND_BRACKET";
            bindings = <&kp DE_LPAR>, <&kp DE_RPAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        question_exclamation: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            bindings = <&kp DE_QUESTION>, <&kp DE_EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        quotes: quotes {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTES";
            bindings = <&kp DE_SQT>, <&kp DE_DOUBLE_QUOTES>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tilde_caret: tilde_caret {
            compatible = "zmk,behavior-mod-morph";
            label = "TILDE_CARET";
            bindings = <&with_space DE_TILDE>, <&with_space DE_CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ticks: ticks {
            compatible = "zmk,behavior-mod-morph";
            label = "TICKS";
            bindings = <&with_space DE_GRAVE>, <&with_space DE_ACUTE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        przoent_ampersand: przoent_ampersand {
            compatible = "zmk,behavior-mod-morph";
            label = "PRZOENT_AMPERSAND";
            bindings = <&kp DE_PERCENT>, <&kp DE_AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dollar_strich: dollar_strich {
            compatible = "zmk,behavior-mod-morph";
            label = "DOLLAR_STRICH";
            bindings = <&kp DE_DOLLAR>, <&kp DE_PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        plus_mal: plus_mal {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_MAL";
            bindings = <&kp DE_PLUS>, <&kp DE_ASTERISK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        forward_back_slash: forward_back_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "FORWARD_BACK_SLASH";
            bindings = <&kp KP_SLASH>, <&kp DE_BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        next_prev: next_prev {
            compatible = "zmk,behavior-mod-morph";
            label = "NEXT_PREV";
            bindings = <&kp C_NEXT>, <&kp C_PREV>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lauter_leiser: lauter_leiser {
            compatible = "zmk,behavior-mod-morph";
            label = "LAUTER_LEISER";
            bindings = <&kp C_VOLUME_UP>, <&kp C_VOLUME_DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sticky_mod: sticky_mod {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_MOD";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            ignore-modifiers;
        };

        hash_equal: hash_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "HASH_EQUAL";
            bindings = <&kp DE_HASH>, <&kp DE_EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp P  &kp O  &kp I  &kp U  &kp T            &trans  &trans  &trans  &trans  &trans
&kp S  &kp L  &kp K  &kp J  &kp H            &trans  &trans  &trans  &trans  &trans
&kp D  &kp A  &kp E  &kp R  &kp N            &trans  &trans  &trans  &trans  &trans
                     &sl 1  &sk RIGHT_SHIFT  &trans  &trans
            >;
        };

        nav_nag {
            bindings = <
&kp BACKSPACE  &kp END               &kp PAGE_UP           &kp PAGE_DOWN             &kp HOME        &trans  &trans  &trans  &trans  &trans
&kp ENTER      &kp RIGHT_ARROW       &kp UP_ARROW          &kp DOWN_ARROW            &kp LEFT_ARROW  &trans  &trans  &trans  &trans  &trans
&none          &sticky_mod LEFT_GUI  &sticky_mod LEFT_ALT  &sticky_mod LEFT_CONTROL  &none           &trans  &trans  &trans  &trans  &trans
                                                           &sl 1                     &kp LSHIFT      &trans  &trans
            >;
        };
    };
};
