/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "keys_de_swiss.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

&led_strip {
    chain-length = <21>;
};

/ {
    combos {
        compatible = "zmk,combos";

        n1 {
            bindings = <&n1_f1>;
            key-positions = <>;
        };

        n2 {
            bindings = <&n2_f2>;
            key-positions = <>;
        };

        n3 {
            bindings = <&n3_f3>;
            key-positions = <>;
        };

        n4 {
            bindings = <&n4_f4>;
            key-positions = <11 12>;
        };

        n5 {
            bindings = <&n5_f5>;
            key-positions = <3 21>;
        };

        n6 {
            bindings = <&n6_f6>;
            key-positions = <13 21>;
        };

        n7 {
            bindings = <&n7_f7>;
            key-positions = <1 22>;
        };

        n8 {
            bindings = <&n8_f8>;
            key-positions = <10 13>;
        };

        n9 {
            bindings = <&n9_f9>;
            key-positions = <12 21>;
        };

        n0 {
            bindings = <&n0_f10>;
            key-positions = <10 13>;
        };

        l-enter {
            bindings = <&kp ENTER>;
            key-positions = <13 12>;
        };

        r-enter {
            bindings = <&kp ENTER>;
            key-positions = <26 28>;
        };

        l-gui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <23 12>;
        };

        r-gui {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <>;
        };

        l-backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <3 2>;
        };

        r-backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <6 8>;
        };

        l-esc {
            bindings = <&kp ESC>;
            key-positions = <11 10>;
        };

        r-esc {
            bindings = <&kp ESCAPE>;
            key-positions = <>;
        };

        l-alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <13 2>;
        };

        r-alt {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <>;
        };

        l-tap {
            bindings = <&kp TAB>;
            key-positions = <3 14>;
        };

        r-tap {
            bindings = <&kp TAB>;
            key-positions = <>;
        };

        g {
            bindings = <&kp G>;
            key-positions = <15 16>;
        };

        b {
            bindings = <&kp B>;
            key-positions = <25 26>;
        };

        to1 {
            bindings = <&mo 1>;
            key-positions = <>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <16 18>;
        };

        left-bootloader {
            bindings = <&bootloader>;
            key-positions = <0 11 22>;
        };

        right-bootloader {
            bindings = <&bootloader>;
            key-positions = <9 18 27>;
        };

        r {
            bindings = <&kp R>;
            key-positions = <6 7>;
        };

        f {
            bindings = <&kp F>;
            key-positions = <16 17>;
        };

        v {
            bindings = <&kp V>;
            key-positions = <26 27>;
        };

        oe {
            bindings = <&shift_oe>;
            key-positions = <5 6>;
        };

        ae {
            bindings = <&shift_ae>;
            key-positions = <7 8>;
        };

        d {
            bindings = <&kp D>;
            key-positions = <17 18>;
        };

        c {
            bindings = <&kp C>;
            key-positions = <27 28>;
        };

        w {
            bindings = <&kp W>;
            key-positions = <8 9>;
        };

        x {
            bindings = <&kp X>;
            key-positions = <18 19>;
        };

        z {
            bindings = <&kp Z>;
            key-positions = <5 7>;
        };

        q {
            bindings = <&kp Q>;
            key-positions = <7 9>;
        };

        ue {
            bindings = <&shift_ue>;
            key-positions = <28 29>;
        };

        angled_bracket {
            bindings = <&angle_bracket>;
            key-positions = <16 8>;
        };

        curly_bracket {
            bindings = <&curly_bracket>;
            key-positions = <6 18>;
        };

        round_bracket {
            bindings = <&round_bracket>;
            key-positions = <16 28>;
        };

        square_bracket {
            bindings = <&square_bracket>;
            key-positions = <26 18>;
        };
    };

    macros {
        caps_ae: caps_ae {
            compatible = "zmk,behavior-macro";
            label = "CAPS_AE";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp CAPSLOCK>,
                <&macro_tap>,
                <&kp DE_A_UMLAUT>,
                <&macro_tap>,
                <&kp CAPSLOCK>;
        };
    };

    behaviors {
        brace: brace {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACE";
            bindings =
                <&kp DE_LEFT_BRACE>,
                <&kp DE_RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        shift_ae: shift_ae {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_AE";
            bindings =
                <&kp DE_A_UMLAUT>,
                <&caps_ae>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        shift_oe: shift_oe {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_OE";
            bindings =
                <&kp DE_O_UMLAUT>,
                <&caps_ae>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        shift_ue: shift_ue {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_UE";
            bindings =
                <&kp DE_U_UMLAUT>,
                <&caps_ae>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n1_f1: n1_f1 {
            compatible = "zmk,behavior-mod-morph";
            label = "N1_F1";
            bindings =
                <&kp NUMBER_1>,
                <&kp F1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n2_f2: n2_f2 {
            compatible = "zmk,behavior-mod-morph";
            label = "N2_F2";
            bindings =
                <&kp NUMBER_2>,
                <&kp F2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n3_f3: n3_f3 {
            compatible = "zmk,behavior-mod-morph";
            label = "N3_F3";
            bindings =
                <&kp NUMBER_3>,
                <&kp F3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n4_f4: n4_f4 {
            compatible = "zmk,behavior-mod-morph";
            label = "N4_F4";
            bindings =
                <&kp NUMBER_4>,
                <&kp F4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n5_f5: n5_f5 {
            compatible = "zmk,behavior-mod-morph";
            label = "N5_F5";
            bindings =
                <&kp NUMBER_5>,
                <&kp F5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n6_f6: n6_f6 {
            compatible = "zmk,behavior-mod-morph";
            label = "N6_F6";
            bindings =
                <&kp NUMBER_6>,
                <&kp F6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n7_f7: n7_f7 {
            compatible = "zmk,behavior-mod-morph";
            label = "N7_F7";
            bindings =
                <&kp NUMBER_7>,
                <&kp F7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n8_f8: n8_f8 {
            compatible = "zmk,behavior-mod-morph";
            label = "N8_F8";
            bindings =
                <&kp NUMBER_8>,
                <&kp F8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n9_f9: n9_f9 {
            compatible = "zmk,behavior-mod-morph";
            label = "N9_F9";
            bindings =
                <&kp NUMBER_9>,
                <&kp F9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n0_f10: n0_f10 {
            compatible = "zmk,behavior-mod-morph";
            label = "N0_F10";
            bindings =
                <&kp NUMBER_0>,
                <&kp F10>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        angle_bracket: angle_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "ANGLE_BRACKET";
            bindings =
                <&kp LT>,
                <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        square_bracket: square_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "SQUARE_BRACKET";
            bindings =
                <&kp LBKT>,
                <&kp RBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        curly_bracket: curly_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "CURLY_BRACKET";
            bindings =
                <&kp LBRC>,
                <&kp RBRC>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        round_bracket: round_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "ROUND_BRACKET";
            bindings =
                <&kp LPAR>,
                <&kp RPAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
 &angle_bracket  &curly_bracket  &kp E      &kp R           &kp T            &kp T             &kp U  &kp E  &kp O  &kp P
&square_bracket  &round_bracket  &kp D      &kp F           &kp G            &kp H             &kp J  &kp K  &kp L  &kp A
         &n1_f1           &kp X  &kp C      &kp V           &kp B            &kp N             &kp M  &kp I  &kp S  &mo 1
                                        &kp SPACE  &sk LEFT_SHIFT  &sk RIGHT_SHIFT  &kp LEFT_CONTROL
            >;
        };

        nav_nag {
            bindings = <
&kp DE_GRAVE      &kp DE_AT  &kp DE_EQUAL  &kp DE_AMPERSAND  &kp DE_CARET  &kp DE_PERCENT  &kp DE_DOUBLE_QUOTES   &kp DE_PLUS           &kp NUM_9  &kp DE_U_UMLAUT
    &kp HOME  &kp PAGE_DOWN   &kp PAGE_UP           &kp END  &kp DE_TILDE  &kp LEFT_ARROW        &kp DOWN_ARROW  &kp UP_ARROW     &kp RIGHT_ARROW  &kp DE_O_UMLAUT
&kp DE_ACUTE          &to 2  &kp CAPSLOCK     &kp DE_DOLLAR   &kp DE_HASH   &kp DE_DEGREE   &kp DE_SINGLE_QUOTE  &kp DE_ASTRK  &kp DE_EXCLAMATION  &kp DE_QUESTION
                                                      &mo 1      &kp LGUI        &kp RGUI                 &mo 2
            >;
        };

        f_special {
            bindings = <
  &bt BT_CLR    &bt BT_NXT    &bt BT_PRV  &kp DLLR  &kp PRCT   &kp CRRT      &kp AMPS  &kp KMLT     &kp LPRN    &kp RPRN
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &kp COLN  &kp SCLN  &kp MINUS  &kp KP_EQUAL  &kp LBRC     &kp RBRC    &kp BKSP
  &sys_reset   &bootloader      &kp LBKT  &kp RBKT  &kp BSLH  &kp UNDER      &kp LEFT  &kp DOWN  &bootloader  &sys_reset
                                             &mo 0  &kp LCTL      &to 0         &mo 2
            >;
        };
    };
};
